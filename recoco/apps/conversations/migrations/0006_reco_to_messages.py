# Generated by Django 5.1.11 on 2025-08-29 12:37

from django.contrib.contenttypes.models import ContentType
from django.db import migrations, transaction
from guardian.utils import get_anonymous_user
from django.contrib.auth import models as auth_models


def create_messages_from_recommendations(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    Task = apps.get_model("tasks", "Task")
    Document = apps.get_model("projects", "Document")
    Message = apps.get_model("conversations", "Message")
    RecommendationNode = apps.get_model("conversations", "RecommendationNode")
    ContactNode = apps.get_model("conversations", "ContactNode")
    DocumentNode = apps.get_model("conversations", "DocumentNode")
    MarkdownNode = apps.get_model("conversations", "MarkdownNode")

    # in case of a fresh installation, AnonymousUser does not exist and we have no data,
    # so skip this migration
    try:
        anonymous_user = get_anonymous_user()
    except auth_models.User.DoesNotExist:
        return

    # if no resource, set text as reco.
    #
    for project in Project.objects.all():
        for task in Task.objects.filter(project=project, public=True):
            with transaction.atomic():
                # First, create the message mirroring the Recommendation itself
                msg = Message.objects.create(
                    project=project,
                    posted_by_id=task.created_by_id or anonymous_user.pk,
                    created=task.created_on,
                    modified=task.updated_on,
                )
                prev_node = RecommendationNode.objects.create(
                    message=msg, position=1, text=task.content, recommendation=task
                )

                if task.contact:
                    prev_node = ContactNode.objects.create(
                        message=msg,
                        position=prev_node.position + 1,
                        contact=task.contact,
                    )

                if document := Document.objects.filter(
                    content_type_id=ContentType.objects.get_for_model(Task).pk,
                    object_id=task.pk,
                ).first():
                    prev_node = DocumentNode.objects.create(
                        message=msg, position=prev_node.position + 1, document=document
                    )

                # Then, add TaskFollowups as replies
                for followup in task.followups.exclude(comment=""):
                    foll_msg = Message.objects.create(
                        project=project,
                        posted_by_id=followup.who_id or anonymous_user.pk,
                        created=followup.timestamp,
                        in_reply_to=msg,
                    )

                    MarkdownNode.objects.create(
                        message=msg, position=1, text=followup.comment
                    )

                    if followup.contact:
                        ContactNode.objects.create(
                            message=foll_msg,
                            position=2,
                            contact=followup.contact,
                        )


class Migration(migrations.Migration):
    dependencies = [("conversations", "0005_recommendationnode_text")]

    operations = [
        migrations.RunPython(create_messages_from_recommendations, lambda x, y: None)
    ]
